# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  # Replace this name with that of the Azure service connection in your DevOps project
  ConnectedServiceName: 'Dat connection'

  # Replace this name to match the name of the App Service you created earlier
  WebAppName: 'devops-demo-emma-sara'

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python27:
      python.version: '2.7'
    #Python36:
    #  python.version: '3.6'
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

# The | symbol is a continuation character, indicating a multi-line script.
# A single-line script can immediately follows "- script:" without the |.
- script: |
    # antenv is the virtual environment name that App Service expects
    python3.6 -m venv antenv
    source antenv/bin/activate
    pip3.6 install setuptools
    pip3.6 install -r requirements.txt

  # The displayName is shows in the pipeline UI when a build runs
  displayName: 'Install Dependencies'

- script: |
    pip install pytest pytest-azurepipelines pytest-cov
    pytest --cov=tests/ --cov-report=xml --cov-branch
  #  --cov=$(Build.StagingDirectory) tests/ --junitxml=$(Build.StagingDirectory)/cov.xml
  displayName: 'pytest'

# Publish Code Coverage Results
# Publish Cobertura or JaCoCo code coverage results from a build
- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage results
  inputs:
    codeCoverageTool: 'cobertura' 
    # Options: cobertura, jaCoCo
    summaryFileLocation: '$(Build.SourcesDirectory)/test-cov.xml'
    #reportDirectory: # Optional
    #additionalCodeCoverageFiles: # Optional
    #failIfCoverageEmpty: false # Optional

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFiles: '$(Build.SourcesDirectory)/test-output.xml'
    testRunTitle: Tests

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: # (no value); this input is optional

- task: AzureRMWebAppDeployment@4
  displayName: Azure App Service Deploy
  inputs:
    appType: webAppLinux
    RuntimeStack: 'PYTHON|3.7'
    ConnectedServiceName: $(ConnectedServiceName)
    WebAppName: $(WebAppName)
    Package: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'

    # The following parameter is specific to the Flask example code. You may
    # or may not need a startup command for your own app.

    # StartupCommand: 'gunicorn --bind=0.0.0.0 --workers=4 startup:app'